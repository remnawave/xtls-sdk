// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: core/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { TypedMessage } from "../common/serial/typed_message";
import { Config as Config1 } from "../transport/global/config";
import { messageTypeRegistry } from "../typeRegistry";

export const protobufPackage = "xray.core";

/**
 * Config is the master config of Xray. Xray takes this config as input and
 * functions accordingly.
 */
export interface Config {
  $type: "xray.core.Config";
  /** Inbound handler configurations. Must have at least one item. */
  inbound: InboundHandlerConfig[];
  /**
   * Outbound handler configurations. Must have at least one item. The first
   * item is used as default for routing.
   */
  outbound: OutboundHandlerConfig[];
  /**
   * App is for configurations of all features in Xray. A feature must
   * implement the Feature interface, and its config type must be registered
   * through common.RegisterConfig.
   */
  app: TypedMessage[];
  /**
   * Transport settings.
   * Deprecated. Each inbound and outbound should choose their own transport
   * config. Date to remove: 2020-01-13
   *
   * @deprecated
   */
  transport:
    | Config1
    | undefined;
  /**
   * Configuration for extensions. The config may not work if corresponding
   * extension is not loaded into Xray. Xray will ignore such config during
   * initialization.
   */
  extension: TypedMessage[];
}

/** InboundHandlerConfig is the configuration for inbound handler. */
export interface InboundHandlerConfig {
  $type: "xray.core.InboundHandlerConfig";
  /**
   * Tag of the inbound handler. The tag must be unique among all inbound
   * handlers
   */
  tag: string;
  /** Settings for how this inbound proxy is handled. */
  receiverSettings:
    | TypedMessage
    | undefined;
  /** Settings for inbound proxy. Must be one of the inbound proxies. */
  proxySettings: TypedMessage | undefined;
}

/** OutboundHandlerConfig is the configuration for outbound handler. */
export interface OutboundHandlerConfig {
  $type: "xray.core.OutboundHandlerConfig";
  /** Tag of this outbound handler. */
  tag: string;
  /** Settings for how to dial connection for this outbound handler. */
  senderSettings:
    | TypedMessage
    | undefined;
  /** Settings for this outbound proxy. Must be one of the outbound proxies. */
  proxySettings:
    | TypedMessage
    | undefined;
  /** If not zero, this outbound will be expired in seconds. Not used for now. */
  expire: number;
  /** Comment of this outbound handler. Not used for now. */
  comment: string;
}

function createBaseConfig(): Config {
  return { $type: "xray.core.Config", inbound: [], outbound: [], app: [], transport: undefined, extension: [] };
}

export const Config: MessageFns<Config, "xray.core.Config"> = {
  $type: "xray.core.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.inbound) {
      InboundHandlerConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.outbound) {
      OutboundHandlerConfig.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.app) {
      TypedMessage.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.transport !== undefined) {
      Config1.encode(message.transport, writer.uint32(42).fork()).join();
    }
    for (const v of message.extension) {
      TypedMessage.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inbound.push(InboundHandlerConfig.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.outbound.push(OutboundHandlerConfig.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.app.push(TypedMessage.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.transport = Config1.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.extension.push(TypedMessage.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      inbound: globalThis.Array.isArray(object?.inbound)
        ? object.inbound.map((e: any) => InboundHandlerConfig.fromJSON(e))
        : [],
      outbound: globalThis.Array.isArray(object?.outbound)
        ? object.outbound.map((e: any) => OutboundHandlerConfig.fromJSON(e))
        : [],
      app: globalThis.Array.isArray(object?.app) ? object.app.map((e: any) => TypedMessage.fromJSON(e)) : [],
      transport: isSet(object.transport) ? Config1.fromJSON(object.transport) : undefined,
      extension: globalThis.Array.isArray(object?.extension)
        ? object.extension.map((e: any) => TypedMessage.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.inbound?.length) {
      obj.inbound = message.inbound.map((e) => InboundHandlerConfig.toJSON(e));
    }
    if (message.outbound?.length) {
      obj.outbound = message.outbound.map((e) => OutboundHandlerConfig.toJSON(e));
    }
    if (message.app?.length) {
      obj.app = message.app.map((e) => TypedMessage.toJSON(e));
    }
    if (message.transport !== undefined) {
      obj.transport = Config1.toJSON(message.transport);
    }
    if (message.extension?.length) {
      obj.extension = message.extension.map((e) => TypedMessage.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Config>): Config {
    return Config.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Config>): Config {
    const message = createBaseConfig();
    message.inbound = object.inbound?.map((e) => InboundHandlerConfig.fromPartial(e)) || [];
    message.outbound = object.outbound?.map((e) => OutboundHandlerConfig.fromPartial(e)) || [];
    message.app = object.app?.map((e) => TypedMessage.fromPartial(e)) || [];
    message.transport = (object.transport !== undefined && object.transport !== null)
      ? Config1.fromPartial(object.transport)
      : undefined;
    message.extension = object.extension?.map((e) => TypedMessage.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

function createBaseInboundHandlerConfig(): InboundHandlerConfig {
  return { $type: "xray.core.InboundHandlerConfig", tag: "", receiverSettings: undefined, proxySettings: undefined };
}

export const InboundHandlerConfig: MessageFns<InboundHandlerConfig, "xray.core.InboundHandlerConfig"> = {
  $type: "xray.core.InboundHandlerConfig" as const,

  encode(message: InboundHandlerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tag !== "") {
      writer.uint32(10).string(message.tag);
    }
    if (message.receiverSettings !== undefined) {
      TypedMessage.encode(message.receiverSettings, writer.uint32(18).fork()).join();
    }
    if (message.proxySettings !== undefined) {
      TypedMessage.encode(message.proxySettings, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InboundHandlerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInboundHandlerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tag = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.receiverSettings = TypedMessage.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.proxySettings = TypedMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InboundHandlerConfig {
    return {
      $type: InboundHandlerConfig.$type,
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
      receiverSettings: isSet(object.receiverSettings) ? TypedMessage.fromJSON(object.receiverSettings) : undefined,
      proxySettings: isSet(object.proxySettings) ? TypedMessage.fromJSON(object.proxySettings) : undefined,
    };
  },

  toJSON(message: InboundHandlerConfig): unknown {
    const obj: any = {};
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    if (message.receiverSettings !== undefined) {
      obj.receiverSettings = TypedMessage.toJSON(message.receiverSettings);
    }
    if (message.proxySettings !== undefined) {
      obj.proxySettings = TypedMessage.toJSON(message.proxySettings);
    }
    return obj;
  },

  create(base?: DeepPartial<InboundHandlerConfig>): InboundHandlerConfig {
    return InboundHandlerConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InboundHandlerConfig>): InboundHandlerConfig {
    const message = createBaseInboundHandlerConfig();
    message.tag = object.tag ?? "";
    message.receiverSettings = (object.receiverSettings !== undefined && object.receiverSettings !== null)
      ? TypedMessage.fromPartial(object.receiverSettings)
      : undefined;
    message.proxySettings = (object.proxySettings !== undefined && object.proxySettings !== null)
      ? TypedMessage.fromPartial(object.proxySettings)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(InboundHandlerConfig.$type, InboundHandlerConfig);

function createBaseOutboundHandlerConfig(): OutboundHandlerConfig {
  return {
    $type: "xray.core.OutboundHandlerConfig",
    tag: "",
    senderSettings: undefined,
    proxySettings: undefined,
    expire: 0,
    comment: "",
  };
}

export const OutboundHandlerConfig: MessageFns<OutboundHandlerConfig, "xray.core.OutboundHandlerConfig"> = {
  $type: "xray.core.OutboundHandlerConfig" as const,

  encode(message: OutboundHandlerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tag !== "") {
      writer.uint32(10).string(message.tag);
    }
    if (message.senderSettings !== undefined) {
      TypedMessage.encode(message.senderSettings, writer.uint32(18).fork()).join();
    }
    if (message.proxySettings !== undefined) {
      TypedMessage.encode(message.proxySettings, writer.uint32(26).fork()).join();
    }
    if (message.expire !== 0) {
      writer.uint32(32).int64(message.expire);
    }
    if (message.comment !== "") {
      writer.uint32(42).string(message.comment);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutboundHandlerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutboundHandlerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tag = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.senderSettings = TypedMessage.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.proxySettings = TypedMessage.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.expire = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutboundHandlerConfig {
    return {
      $type: OutboundHandlerConfig.$type,
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
      senderSettings: isSet(object.senderSettings) ? TypedMessage.fromJSON(object.senderSettings) : undefined,
      proxySettings: isSet(object.proxySettings) ? TypedMessage.fromJSON(object.proxySettings) : undefined,
      expire: isSet(object.expire) ? globalThis.Number(object.expire) : 0,
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
    };
  },

  toJSON(message: OutboundHandlerConfig): unknown {
    const obj: any = {};
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    if (message.senderSettings !== undefined) {
      obj.senderSettings = TypedMessage.toJSON(message.senderSettings);
    }
    if (message.proxySettings !== undefined) {
      obj.proxySettings = TypedMessage.toJSON(message.proxySettings);
    }
    if (message.expire !== 0) {
      obj.expire = Math.round(message.expire);
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    return obj;
  },

  create(base?: DeepPartial<OutboundHandlerConfig>): OutboundHandlerConfig {
    return OutboundHandlerConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OutboundHandlerConfig>): OutboundHandlerConfig {
    const message = createBaseOutboundHandlerConfig();
    message.tag = object.tag ?? "";
    message.senderSettings = (object.senderSettings !== undefined && object.senderSettings !== null)
      ? TypedMessage.fromPartial(object.senderSettings)
      : undefined;
    message.proxySettings = (object.proxySettings !== undefined && object.proxySettings !== null)
      ? TypedMessage.fromPartial(object.proxySettings)
      : undefined;
    message.expire = object.expire ?? 0;
    message.comment = object.comment ?? "";
    return message;
  },
};

messageTypeRegistry.set(OutboundHandlerConfig.$type, OutboundHandlerConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
