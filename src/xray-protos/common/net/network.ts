// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: common/net/network.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../typeRegistry";

export const protobufPackage = "xray.common.net";

export enum Network {
  Unknown = 0,
  /** @deprecated */
  RawTCP = 1,
  TCP = 2,
  UDP = 3,
  UNIX = 4,
  UNRECOGNIZED = -1,
}

export function networkFromJSON(object: any): Network {
  switch (object) {
    case 0:
    case "Unknown":
      return Network.Unknown;
    case 1:
    case "RawTCP":
      return Network.RawTCP;
    case 2:
    case "TCP":
      return Network.TCP;
    case 3:
    case "UDP":
      return Network.UDP;
    case 4:
    case "UNIX":
      return Network.UNIX;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Network.UNRECOGNIZED;
  }
}

export function networkToJSON(object: Network): string {
  switch (object) {
    case Network.Unknown:
      return "Unknown";
    case Network.RawTCP:
      return "RawTCP";
    case Network.TCP:
      return "TCP";
    case Network.UDP:
      return "UDP";
    case Network.UNIX:
      return "UNIX";
    case Network.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** NetworkList is a list of Networks. */
export interface NetworkList {
  $type: "xray.common.net.NetworkList";
  network: Network[];
}

function createBaseNetworkList(): NetworkList {
  return { $type: "xray.common.net.NetworkList", network: [] };
}

export const NetworkList: MessageFns<NetworkList, "xray.common.net.NetworkList"> = {
  $type: "xray.common.net.NetworkList" as const,

  encode(message: NetworkList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.network) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NetworkList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.network.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.network.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkList {
    return {
      $type: NetworkList.$type,
      network: globalThis.Array.isArray(object?.network) ? object.network.map((e: any) => networkFromJSON(e)) : [],
    };
  },

  toJSON(message: NetworkList): unknown {
    const obj: any = {};
    if (message.network?.length) {
      obj.network = message.network.map((e) => networkToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<NetworkList>): NetworkList {
    return NetworkList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NetworkList>): NetworkList {
    const message = createBaseNetworkList();
    message.network = object.network?.map((e) => e) || [];
    return message;
  },
};

messageTypeRegistry.set(NetworkList.$type, NetworkList);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
