// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: common/protocol/user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../typeRegistry";
import { TypedMessage } from "../serial/typed_message";

export const protobufPackage = "xray.common.protocol";

/** User is a generic user for all procotols. */
export interface User {
  $type: "xray.common.protocol.User";
  level: number;
  email: string;
  /**
   * Protocol specific account information. Must be the account proto in one of
   * the proxies.
   */
  account: TypedMessage | undefined;
}

function createBaseUser(): User {
  return { $type: "xray.common.protocol.User", level: 0, email: "", account: undefined };
}

export const User: MessageFns<User, "xray.common.protocol.User"> = {
  $type: "xray.common.protocol.User" as const,

  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.level !== 0) {
      writer.uint32(8).uint32(message.level);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.account !== undefined) {
      TypedMessage.encode(message.account, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.level = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.account = TypedMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      $type: User.$type,
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      account: isSet(object.account) ? TypedMessage.fromJSON(object.account) : undefined,
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.account !== undefined) {
      obj.account = TypedMessage.toJSON(message.account);
    }
    return obj;
  },

  create(base?: DeepPartial<User>): User {
    return User.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<User>): User {
    const message = createBaseUser();
    message.level = object.level ?? 0;
    message.email = object.email ?? "";
    message.account = (object.account !== undefined && object.account !== null)
      ? TypedMessage.fromPartial(object.account)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(User.$type, User);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
