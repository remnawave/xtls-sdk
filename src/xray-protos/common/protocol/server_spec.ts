// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.29.3
// source: common/protocol/server_spec.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../typeRegistry";
import { IPOrDomain } from "../net/address";
import { User } from "./user";

export const protobufPackage = "xray.common.protocol";

export interface ServerEndpoint {
  $type: "xray.common.protocol.ServerEndpoint";
  address: IPOrDomain | undefined;
  port: number;
  user: User | undefined;
}

function createBaseServerEndpoint(): ServerEndpoint {
  return { $type: "xray.common.protocol.ServerEndpoint", address: undefined, port: 0, user: undefined };
}

export const ServerEndpoint: MessageFns<ServerEndpoint, "xray.common.protocol.ServerEndpoint"> = {
  $type: "xray.common.protocol.ServerEndpoint" as const,

  encode(message: ServerEndpoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== undefined) {
      IPOrDomain.encode(message.address, writer.uint32(10).fork()).join();
    }
    if (message.port !== 0) {
      writer.uint32(16).uint32(message.port);
    }
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerEndpoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerEndpoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = IPOrDomain.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.port = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerEndpoint {
    return {
      $type: ServerEndpoint.$type,
      address: isSet(object.address) ? IPOrDomain.fromJSON(object.address) : undefined,
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: ServerEndpoint): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = IPOrDomain.toJSON(message.address);
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port);
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create(base?: DeepPartial<ServerEndpoint>): ServerEndpoint {
    return ServerEndpoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServerEndpoint>): ServerEndpoint {
    const message = createBaseServerEndpoint();
    message.address = (object.address !== undefined && object.address !== null)
      ? IPOrDomain.fromPartial(object.address)
      : undefined;
    message.port = object.port ?? 0;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

messageTypeRegistry.set(ServerEndpoint.$type, ServerEndpoint);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
