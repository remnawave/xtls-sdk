// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: app/proxyman/command/command.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { User } from "../../../common/protocol/user";
import { TypedMessage } from "../../../common/serial/typed_message";
import { InboundHandlerConfig, OutboundHandlerConfig } from "../../../core/config";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "xray.app.proxyman.command";

export interface AddUserOperation {
  $type: "xray.app.proxyman.command.AddUserOperation";
  user: User | undefined;
}

export interface RemoveUserOperation {
  $type: "xray.app.proxyman.command.RemoveUserOperation";
  email: string;
}

export interface AddInboundRequest {
  $type: "xray.app.proxyman.command.AddInboundRequest";
  inbound: InboundHandlerConfig | undefined;
}

export interface AddInboundResponse {
  $type: "xray.app.proxyman.command.AddInboundResponse";
}

export interface RemoveInboundRequest {
  $type: "xray.app.proxyman.command.RemoveInboundRequest";
  tag: string;
}

export interface RemoveInboundResponse {
  $type: "xray.app.proxyman.command.RemoveInboundResponse";
}

export interface AlterInboundRequest {
  $type: "xray.app.proxyman.command.AlterInboundRequest";
  tag: string;
  operation: TypedMessage | undefined;
}

export interface AlterInboundResponse {
  $type: "xray.app.proxyman.command.AlterInboundResponse";
}

export interface AddOutboundRequest {
  $type: "xray.app.proxyman.command.AddOutboundRequest";
  outbound: OutboundHandlerConfig | undefined;
}

export interface AddOutboundResponse {
  $type: "xray.app.proxyman.command.AddOutboundResponse";
}

export interface RemoveOutboundRequest {
  $type: "xray.app.proxyman.command.RemoveOutboundRequest";
  tag: string;
}

export interface RemoveOutboundResponse {
  $type: "xray.app.proxyman.command.RemoveOutboundResponse";
}

export interface AlterOutboundRequest {
  $type: "xray.app.proxyman.command.AlterOutboundRequest";
  tag: string;
  operation: TypedMessage | undefined;
}

export interface AlterOutboundResponse {
  $type: "xray.app.proxyman.command.AlterOutboundResponse";
}

export interface Config {
  $type: "xray.app.proxyman.command.Config";
}

function createBaseAddUserOperation(): AddUserOperation {
  return { $type: "xray.app.proxyman.command.AddUserOperation", user: undefined };
}

export const AddUserOperation: MessageFns<AddUserOperation, "xray.app.proxyman.command.AddUserOperation"> = {
  $type: "xray.app.proxyman.command.AddUserOperation" as const,

  encode(message: AddUserOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddUserOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddUserOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddUserOperation {
    return { $type: AddUserOperation.$type, user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  },

  toJSON(message: AddUserOperation): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create(base?: DeepPartial<AddUserOperation>): AddUserOperation {
    return AddUserOperation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddUserOperation>): AddUserOperation {
    const message = createBaseAddUserOperation();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

messageTypeRegistry.set(AddUserOperation.$type, AddUserOperation);

function createBaseRemoveUserOperation(): RemoveUserOperation {
  return { $type: "xray.app.proxyman.command.RemoveUserOperation", email: "" };
}

export const RemoveUserOperation: MessageFns<RemoveUserOperation, "xray.app.proxyman.command.RemoveUserOperation"> = {
  $type: "xray.app.proxyman.command.RemoveUserOperation" as const,

  encode(message: RemoveUserOperation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveUserOperation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveUserOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveUserOperation {
    return { $type: RemoveUserOperation.$type, email: isSet(object.email) ? globalThis.String(object.email) : "" };
  },

  toJSON(message: RemoveUserOperation): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveUserOperation>): RemoveUserOperation {
    return RemoveUserOperation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveUserOperation>): RemoveUserOperation {
    const message = createBaseRemoveUserOperation();
    message.email = object.email ?? "";
    return message;
  },
};

messageTypeRegistry.set(RemoveUserOperation.$type, RemoveUserOperation);

function createBaseAddInboundRequest(): AddInboundRequest {
  return { $type: "xray.app.proxyman.command.AddInboundRequest", inbound: undefined };
}

export const AddInboundRequest: MessageFns<AddInboundRequest, "xray.app.proxyman.command.AddInboundRequest"> = {
  $type: "xray.app.proxyman.command.AddInboundRequest" as const,

  encode(message: AddInboundRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inbound !== undefined) {
      InboundHandlerConfig.encode(message.inbound, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddInboundRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddInboundRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inbound = InboundHandlerConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddInboundRequest {
    return {
      $type: AddInboundRequest.$type,
      inbound: isSet(object.inbound) ? InboundHandlerConfig.fromJSON(object.inbound) : undefined,
    };
  },

  toJSON(message: AddInboundRequest): unknown {
    const obj: any = {};
    if (message.inbound !== undefined) {
      obj.inbound = InboundHandlerConfig.toJSON(message.inbound);
    }
    return obj;
  },

  create(base?: DeepPartial<AddInboundRequest>): AddInboundRequest {
    return AddInboundRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddInboundRequest>): AddInboundRequest {
    const message = createBaseAddInboundRequest();
    message.inbound = (object.inbound !== undefined && object.inbound !== null)
      ? InboundHandlerConfig.fromPartial(object.inbound)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(AddInboundRequest.$type, AddInboundRequest);

function createBaseAddInboundResponse(): AddInboundResponse {
  return { $type: "xray.app.proxyman.command.AddInboundResponse" };
}

export const AddInboundResponse: MessageFns<AddInboundResponse, "xray.app.proxyman.command.AddInboundResponse"> = {
  $type: "xray.app.proxyman.command.AddInboundResponse" as const,

  encode(_: AddInboundResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddInboundResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddInboundResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AddInboundResponse {
    return { $type: AddInboundResponse.$type };
  },

  toJSON(_: AddInboundResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AddInboundResponse>): AddInboundResponse {
    return AddInboundResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AddInboundResponse>): AddInboundResponse {
    const message = createBaseAddInboundResponse();
    return message;
  },
};

messageTypeRegistry.set(AddInboundResponse.$type, AddInboundResponse);

function createBaseRemoveInboundRequest(): RemoveInboundRequest {
  return { $type: "xray.app.proxyman.command.RemoveInboundRequest", tag: "" };
}

export const RemoveInboundRequest: MessageFns<RemoveInboundRequest, "xray.app.proxyman.command.RemoveInboundRequest"> =
  {
    $type: "xray.app.proxyman.command.RemoveInboundRequest" as const,

    encode(message: RemoveInboundRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.tag !== "") {
        writer.uint32(10).string(message.tag);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): RemoveInboundRequest {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseRemoveInboundRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.tag = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): RemoveInboundRequest {
      return { $type: RemoveInboundRequest.$type, tag: isSet(object.tag) ? globalThis.String(object.tag) : "" };
    },

    toJSON(message: RemoveInboundRequest): unknown {
      const obj: any = {};
      if (message.tag !== "") {
        obj.tag = message.tag;
      }
      return obj;
    },

    create(base?: DeepPartial<RemoveInboundRequest>): RemoveInboundRequest {
      return RemoveInboundRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<RemoveInboundRequest>): RemoveInboundRequest {
      const message = createBaseRemoveInboundRequest();
      message.tag = object.tag ?? "";
      return message;
    },
  };

messageTypeRegistry.set(RemoveInboundRequest.$type, RemoveInboundRequest);

function createBaseRemoveInboundResponse(): RemoveInboundResponse {
  return { $type: "xray.app.proxyman.command.RemoveInboundResponse" };
}

export const RemoveInboundResponse: MessageFns<
  RemoveInboundResponse,
  "xray.app.proxyman.command.RemoveInboundResponse"
> = {
  $type: "xray.app.proxyman.command.RemoveInboundResponse" as const,

  encode(_: RemoveInboundResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveInboundResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveInboundResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveInboundResponse {
    return { $type: RemoveInboundResponse.$type };
  },

  toJSON(_: RemoveInboundResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveInboundResponse>): RemoveInboundResponse {
    return RemoveInboundResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveInboundResponse>): RemoveInboundResponse {
    const message = createBaseRemoveInboundResponse();
    return message;
  },
};

messageTypeRegistry.set(RemoveInboundResponse.$type, RemoveInboundResponse);

function createBaseAlterInboundRequest(): AlterInboundRequest {
  return { $type: "xray.app.proxyman.command.AlterInboundRequest", tag: "", operation: undefined };
}

export const AlterInboundRequest: MessageFns<AlterInboundRequest, "xray.app.proxyman.command.AlterInboundRequest"> = {
  $type: "xray.app.proxyman.command.AlterInboundRequest" as const,

  encode(message: AlterInboundRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tag !== "") {
      writer.uint32(10).string(message.tag);
    }
    if (message.operation !== undefined) {
      TypedMessage.encode(message.operation, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AlterInboundRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlterInboundRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tag = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.operation = TypedMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlterInboundRequest {
    return {
      $type: AlterInboundRequest.$type,
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
      operation: isSet(object.operation) ? TypedMessage.fromJSON(object.operation) : undefined,
    };
  },

  toJSON(message: AlterInboundRequest): unknown {
    const obj: any = {};
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    if (message.operation !== undefined) {
      obj.operation = TypedMessage.toJSON(message.operation);
    }
    return obj;
  },

  create(base?: DeepPartial<AlterInboundRequest>): AlterInboundRequest {
    return AlterInboundRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AlterInboundRequest>): AlterInboundRequest {
    const message = createBaseAlterInboundRequest();
    message.tag = object.tag ?? "";
    message.operation = (object.operation !== undefined && object.operation !== null)
      ? TypedMessage.fromPartial(object.operation)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(AlterInboundRequest.$type, AlterInboundRequest);

function createBaseAlterInboundResponse(): AlterInboundResponse {
  return { $type: "xray.app.proxyman.command.AlterInboundResponse" };
}

export const AlterInboundResponse: MessageFns<AlterInboundResponse, "xray.app.proxyman.command.AlterInboundResponse"> =
  {
    $type: "xray.app.proxyman.command.AlterInboundResponse" as const,

    encode(_: AlterInboundResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): AlterInboundResponse {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseAlterInboundResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(_: any): AlterInboundResponse {
      return { $type: AlterInboundResponse.$type };
    },

    toJSON(_: AlterInboundResponse): unknown {
      const obj: any = {};
      return obj;
    },

    create(base?: DeepPartial<AlterInboundResponse>): AlterInboundResponse {
      return AlterInboundResponse.fromPartial(base ?? {});
    },
    fromPartial(_: DeepPartial<AlterInboundResponse>): AlterInboundResponse {
      const message = createBaseAlterInboundResponse();
      return message;
    },
  };

messageTypeRegistry.set(AlterInboundResponse.$type, AlterInboundResponse);

function createBaseAddOutboundRequest(): AddOutboundRequest {
  return { $type: "xray.app.proxyman.command.AddOutboundRequest", outbound: undefined };
}

export const AddOutboundRequest: MessageFns<AddOutboundRequest, "xray.app.proxyman.command.AddOutboundRequest"> = {
  $type: "xray.app.proxyman.command.AddOutboundRequest" as const,

  encode(message: AddOutboundRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.outbound !== undefined) {
      OutboundHandlerConfig.encode(message.outbound, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddOutboundRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOutboundRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.outbound = OutboundHandlerConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOutboundRequest {
    return {
      $type: AddOutboundRequest.$type,
      outbound: isSet(object.outbound) ? OutboundHandlerConfig.fromJSON(object.outbound) : undefined,
    };
  },

  toJSON(message: AddOutboundRequest): unknown {
    const obj: any = {};
    if (message.outbound !== undefined) {
      obj.outbound = OutboundHandlerConfig.toJSON(message.outbound);
    }
    return obj;
  },

  create(base?: DeepPartial<AddOutboundRequest>): AddOutboundRequest {
    return AddOutboundRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOutboundRequest>): AddOutboundRequest {
    const message = createBaseAddOutboundRequest();
    message.outbound = (object.outbound !== undefined && object.outbound !== null)
      ? OutboundHandlerConfig.fromPartial(object.outbound)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(AddOutboundRequest.$type, AddOutboundRequest);

function createBaseAddOutboundResponse(): AddOutboundResponse {
  return { $type: "xray.app.proxyman.command.AddOutboundResponse" };
}

export const AddOutboundResponse: MessageFns<AddOutboundResponse, "xray.app.proxyman.command.AddOutboundResponse"> = {
  $type: "xray.app.proxyman.command.AddOutboundResponse" as const,

  encode(_: AddOutboundResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddOutboundResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOutboundResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AddOutboundResponse {
    return { $type: AddOutboundResponse.$type };
  },

  toJSON(_: AddOutboundResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AddOutboundResponse>): AddOutboundResponse {
    return AddOutboundResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AddOutboundResponse>): AddOutboundResponse {
    const message = createBaseAddOutboundResponse();
    return message;
  },
};

messageTypeRegistry.set(AddOutboundResponse.$type, AddOutboundResponse);

function createBaseRemoveOutboundRequest(): RemoveOutboundRequest {
  return { $type: "xray.app.proxyman.command.RemoveOutboundRequest", tag: "" };
}

export const RemoveOutboundRequest: MessageFns<
  RemoveOutboundRequest,
  "xray.app.proxyman.command.RemoveOutboundRequest"
> = {
  $type: "xray.app.proxyman.command.RemoveOutboundRequest" as const,

  encode(message: RemoveOutboundRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tag !== "") {
      writer.uint32(10).string(message.tag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveOutboundRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOutboundRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tag = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveOutboundRequest {
    return { $type: RemoveOutboundRequest.$type, tag: isSet(object.tag) ? globalThis.String(object.tag) : "" };
  },

  toJSON(message: RemoveOutboundRequest): unknown {
    const obj: any = {};
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveOutboundRequest>): RemoveOutboundRequest {
    return RemoveOutboundRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveOutboundRequest>): RemoveOutboundRequest {
    const message = createBaseRemoveOutboundRequest();
    message.tag = object.tag ?? "";
    return message;
  },
};

messageTypeRegistry.set(RemoveOutboundRequest.$type, RemoveOutboundRequest);

function createBaseRemoveOutboundResponse(): RemoveOutboundResponse {
  return { $type: "xray.app.proxyman.command.RemoveOutboundResponse" };
}

export const RemoveOutboundResponse: MessageFns<
  RemoveOutboundResponse,
  "xray.app.proxyman.command.RemoveOutboundResponse"
> = {
  $type: "xray.app.proxyman.command.RemoveOutboundResponse" as const,

  encode(_: RemoveOutboundResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveOutboundResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOutboundResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveOutboundResponse {
    return { $type: RemoveOutboundResponse.$type };
  },

  toJSON(_: RemoveOutboundResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveOutboundResponse>): RemoveOutboundResponse {
    return RemoveOutboundResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveOutboundResponse>): RemoveOutboundResponse {
    const message = createBaseRemoveOutboundResponse();
    return message;
  },
};

messageTypeRegistry.set(RemoveOutboundResponse.$type, RemoveOutboundResponse);

function createBaseAlterOutboundRequest(): AlterOutboundRequest {
  return { $type: "xray.app.proxyman.command.AlterOutboundRequest", tag: "", operation: undefined };
}

export const AlterOutboundRequest: MessageFns<AlterOutboundRequest, "xray.app.proxyman.command.AlterOutboundRequest"> =
  {
    $type: "xray.app.proxyman.command.AlterOutboundRequest" as const,

    encode(message: AlterOutboundRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.tag !== "") {
        writer.uint32(10).string(message.tag);
      }
      if (message.operation !== undefined) {
        TypedMessage.encode(message.operation, writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): AlterOutboundRequest {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseAlterOutboundRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.tag = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.operation = TypedMessage.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): AlterOutboundRequest {
      return {
        $type: AlterOutboundRequest.$type,
        tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
        operation: isSet(object.operation) ? TypedMessage.fromJSON(object.operation) : undefined,
      };
    },

    toJSON(message: AlterOutboundRequest): unknown {
      const obj: any = {};
      if (message.tag !== "") {
        obj.tag = message.tag;
      }
      if (message.operation !== undefined) {
        obj.operation = TypedMessage.toJSON(message.operation);
      }
      return obj;
    },

    create(base?: DeepPartial<AlterOutboundRequest>): AlterOutboundRequest {
      return AlterOutboundRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<AlterOutboundRequest>): AlterOutboundRequest {
      const message = createBaseAlterOutboundRequest();
      message.tag = object.tag ?? "";
      message.operation = (object.operation !== undefined && object.operation !== null)
        ? TypedMessage.fromPartial(object.operation)
        : undefined;
      return message;
    },
  };

messageTypeRegistry.set(AlterOutboundRequest.$type, AlterOutboundRequest);

function createBaseAlterOutboundResponse(): AlterOutboundResponse {
  return { $type: "xray.app.proxyman.command.AlterOutboundResponse" };
}

export const AlterOutboundResponse: MessageFns<
  AlterOutboundResponse,
  "xray.app.proxyman.command.AlterOutboundResponse"
> = {
  $type: "xray.app.proxyman.command.AlterOutboundResponse" as const,

  encode(_: AlterOutboundResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AlterOutboundResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlterOutboundResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AlterOutboundResponse {
    return { $type: AlterOutboundResponse.$type };
  },

  toJSON(_: AlterOutboundResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<AlterOutboundResponse>): AlterOutboundResponse {
    return AlterOutboundResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<AlterOutboundResponse>): AlterOutboundResponse {
    const message = createBaseAlterOutboundResponse();
    return message;
  },
};

messageTypeRegistry.set(AlterOutboundResponse.$type, AlterOutboundResponse);

function createBaseConfig(): Config {
  return { $type: "xray.app.proxyman.command.Config" };
}

export const Config: MessageFns<Config, "xray.app.proxyman.command.Config"> = {
  $type: "xray.app.proxyman.command.Config" as const,

  encode(_: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Config {
    return { $type: Config.$type };
  },

  toJSON(_: Config): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Config>): Config {
    return Config.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Config>): Config {
    const message = createBaseConfig();
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

export type HandlerServiceDefinition = typeof HandlerServiceDefinition;
export const HandlerServiceDefinition = {
  name: "HandlerService",
  fullName: "xray.app.proxyman.command.HandlerService",
  methods: {
    addInbound: {
      name: "AddInbound",
      requestType: AddInboundRequest,
      requestStream: false,
      responseType: AddInboundResponse,
      responseStream: false,
      options: {},
    },
    removeInbound: {
      name: "RemoveInbound",
      requestType: RemoveInboundRequest,
      requestStream: false,
      responseType: RemoveInboundResponse,
      responseStream: false,
      options: {},
    },
    alterInbound: {
      name: "AlterInbound",
      requestType: AlterInboundRequest,
      requestStream: false,
      responseType: AlterInboundResponse,
      responseStream: false,
      options: {},
    },
    addOutbound: {
      name: "AddOutbound",
      requestType: AddOutboundRequest,
      requestStream: false,
      responseType: AddOutboundResponse,
      responseStream: false,
      options: {},
    },
    removeOutbound: {
      name: "RemoveOutbound",
      requestType: RemoveOutboundRequest,
      requestStream: false,
      responseType: RemoveOutboundResponse,
      responseStream: false,
      options: {},
    },
    alterOutbound: {
      name: "AlterOutbound",
      requestType: AlterOutboundRequest,
      requestStream: false,
      responseType: AlterOutboundResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface HandlerServiceImplementation<CallContextExt = {}> {
  addInbound(
    request: AddInboundRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddInboundResponse>>;
  removeInbound(
    request: RemoveInboundRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveInboundResponse>>;
  alterInbound(
    request: AlterInboundRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AlterInboundResponse>>;
  addOutbound(
    request: AddOutboundRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddOutboundResponse>>;
  removeOutbound(
    request: RemoveOutboundRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveOutboundResponse>>;
  alterOutbound(
    request: AlterOutboundRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AlterOutboundResponse>>;
}

export interface HandlerServiceClient<CallOptionsExt = {}> {
  addInbound(
    request: DeepPartial<AddInboundRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddInboundResponse>;
  removeInbound(
    request: DeepPartial<RemoveInboundRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveInboundResponse>;
  alterInbound(
    request: DeepPartial<AlterInboundRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AlterInboundResponse>;
  addOutbound(
    request: DeepPartial<AddOutboundRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddOutboundResponse>;
  removeOutbound(
    request: DeepPartial<RemoveOutboundRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveOutboundResponse>;
  alterOutbound(
    request: DeepPartial<AlterOutboundRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AlterOutboundResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
