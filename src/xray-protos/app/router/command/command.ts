// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: app/router/command/command.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Network, networkFromJSON, networkToJSON } from "../../../common/net/network";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "xray.app.router.command";

/**
 * RoutingContext is the context with information relative to routing process.
 * It conforms to the structure of xray.features.routing.Context and
 * xray.features.routing.Route.
 */
export interface RoutingContext {
  $type: "xray.app.router.command.RoutingContext";
  InboundTag: string;
  Network: Network;
  SourceIPs: Uint8Array[];
  TargetIPs: Uint8Array[];
  SourcePort: number;
  TargetPort: number;
  TargetDomain: string;
  Protocol: string;
  User: string;
  Attributes: { [key: string]: string };
  OutboundGroupTags: string[];
  OutboundTag: string;
}

export interface RoutingContext_AttributesEntry {
  $type: "xray.app.router.command.RoutingContext.AttributesEntry";
  key: string;
  value: string;
}

/**
 * SubscribeRoutingStatsRequest subscribes to routing statistics channel if
 * opened by xray-core.
 * * FieldSelectors selects a subset of fields in routing statistics to return.
 * Valid selectors:
 *  - inbound: Selects connection's inbound tag.
 *  - network: Selects connection's network.
 *  - ip: Equivalent as "ip_source" and "ip_target", selects both source and
 *  target IP.
 *  - port: Equivalent as "port_source" and "port_target", selects both source
 *  and target port.
 *  - domain: Selects target domain.
 *  - protocol: Select connection's protocol.
 *  - user: Select connection's inbound user email.
 *  - attributes: Select connection's additional attributes.
 *  - outbound: Equivalent as "outbound" and "outbound_group", select both
 *  outbound tag and outbound group tags.
 * * If FieldSelectors is left empty, all fields will be returned.
 */
export interface SubscribeRoutingStatsRequest {
  $type: "xray.app.router.command.SubscribeRoutingStatsRequest";
  FieldSelectors: string[];
}

/**
 * TestRouteRequest manually tests a routing result according to the routing
 * context message.
 * * RoutingContext is the routing message without outbound information.
 * * FieldSelectors selects the fields to return in the routing result. All
 * fields are returned if left empty.
 * * PublishResult broadcasts the routing result to routing statistics channel
 * if set true.
 */
export interface TestRouteRequest {
  $type: "xray.app.router.command.TestRouteRequest";
  RoutingContext: RoutingContext | undefined;
  FieldSelectors: string[];
  PublishResult: boolean;
}

export interface Config {
  $type: "xray.app.router.command.Config";
}

function createBaseRoutingContext(): RoutingContext {
  return {
    $type: "xray.app.router.command.RoutingContext",
    InboundTag: "",
    Network: 0,
    SourceIPs: [],
    TargetIPs: [],
    SourcePort: 0,
    TargetPort: 0,
    TargetDomain: "",
    Protocol: "",
    User: "",
    Attributes: {},
    OutboundGroupTags: [],
    OutboundTag: "",
  };
}

export const RoutingContext: MessageFns<RoutingContext, "xray.app.router.command.RoutingContext"> = {
  $type: "xray.app.router.command.RoutingContext" as const,

  encode(message: RoutingContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.InboundTag !== "") {
      writer.uint32(10).string(message.InboundTag);
    }
    if (message.Network !== 0) {
      writer.uint32(16).int32(message.Network);
    }
    for (const v of message.SourceIPs) {
      writer.uint32(26).bytes(v!);
    }
    for (const v of message.TargetIPs) {
      writer.uint32(34).bytes(v!);
    }
    if (message.SourcePort !== 0) {
      writer.uint32(40).uint32(message.SourcePort);
    }
    if (message.TargetPort !== 0) {
      writer.uint32(48).uint32(message.TargetPort);
    }
    if (message.TargetDomain !== "") {
      writer.uint32(58).string(message.TargetDomain);
    }
    if (message.Protocol !== "") {
      writer.uint32(66).string(message.Protocol);
    }
    if (message.User !== "") {
      writer.uint32(74).string(message.User);
    }
    Object.entries(message.Attributes).forEach(([key, value]) => {
      RoutingContext_AttributesEntry.encode({
        $type: "xray.app.router.command.RoutingContext.AttributesEntry",
        key: key as any,
        value,
      }, writer.uint32(82).fork()).join();
    });
    for (const v of message.OutboundGroupTags) {
      writer.uint32(90).string(v!);
    }
    if (message.OutboundTag !== "") {
      writer.uint32(98).string(message.OutboundTag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoutingContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoutingContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.InboundTag = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.Network = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.SourceIPs.push(reader.bytes());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.TargetIPs.push(reader.bytes());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.SourcePort = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.TargetPort = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.TargetDomain = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.Protocol = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.User = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          const entry10 = RoutingContext_AttributesEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.Attributes[entry10.key] = entry10.value;
          }
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.OutboundGroupTags.push(reader.string());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.OutboundTag = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoutingContext {
    return {
      $type: RoutingContext.$type,
      InboundTag: isSet(object.InboundTag) ? globalThis.String(object.InboundTag) : "",
      Network: isSet(object.Network) ? networkFromJSON(object.Network) : 0,
      SourceIPs: globalThis.Array.isArray(object?.SourceIPs)
        ? object.SourceIPs.map((e: any) => bytesFromBase64(e))
        : [],
      TargetIPs: globalThis.Array.isArray(object?.TargetIPs)
        ? object.TargetIPs.map((e: any) => bytesFromBase64(e))
        : [],
      SourcePort: isSet(object.SourcePort) ? globalThis.Number(object.SourcePort) : 0,
      TargetPort: isSet(object.TargetPort) ? globalThis.Number(object.TargetPort) : 0,
      TargetDomain: isSet(object.TargetDomain) ? globalThis.String(object.TargetDomain) : "",
      Protocol: isSet(object.Protocol) ? globalThis.String(object.Protocol) : "",
      User: isSet(object.User) ? globalThis.String(object.User) : "",
      Attributes: isObject(object.Attributes)
        ? Object.entries(object.Attributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      OutboundGroupTags: globalThis.Array.isArray(object?.OutboundGroupTags)
        ? object.OutboundGroupTags.map((e: any) => globalThis.String(e))
        : [],
      OutboundTag: isSet(object.OutboundTag) ? globalThis.String(object.OutboundTag) : "",
    };
  },

  toJSON(message: RoutingContext): unknown {
    const obj: any = {};
    if (message.InboundTag !== "") {
      obj.InboundTag = message.InboundTag;
    }
    if (message.Network !== 0) {
      obj.Network = networkToJSON(message.Network);
    }
    if (message.SourceIPs?.length) {
      obj.SourceIPs = message.SourceIPs.map((e) => base64FromBytes(e));
    }
    if (message.TargetIPs?.length) {
      obj.TargetIPs = message.TargetIPs.map((e) => base64FromBytes(e));
    }
    if (message.SourcePort !== 0) {
      obj.SourcePort = Math.round(message.SourcePort);
    }
    if (message.TargetPort !== 0) {
      obj.TargetPort = Math.round(message.TargetPort);
    }
    if (message.TargetDomain !== "") {
      obj.TargetDomain = message.TargetDomain;
    }
    if (message.Protocol !== "") {
      obj.Protocol = message.Protocol;
    }
    if (message.User !== "") {
      obj.User = message.User;
    }
    if (message.Attributes) {
      const entries = Object.entries(message.Attributes);
      if (entries.length > 0) {
        obj.Attributes = {};
        entries.forEach(([k, v]) => {
          obj.Attributes[k] = v;
        });
      }
    }
    if (message.OutboundGroupTags?.length) {
      obj.OutboundGroupTags = message.OutboundGroupTags;
    }
    if (message.OutboundTag !== "") {
      obj.OutboundTag = message.OutboundTag;
    }
    return obj;
  },

  create(base?: DeepPartial<RoutingContext>): RoutingContext {
    return RoutingContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RoutingContext>): RoutingContext {
    const message = createBaseRoutingContext();
    message.InboundTag = object.InboundTag ?? "";
    message.Network = object.Network ?? 0;
    message.SourceIPs = object.SourceIPs?.map((e) => e) || [];
    message.TargetIPs = object.TargetIPs?.map((e) => e) || [];
    message.SourcePort = object.SourcePort ?? 0;
    message.TargetPort = object.TargetPort ?? 0;
    message.TargetDomain = object.TargetDomain ?? "";
    message.Protocol = object.Protocol ?? "";
    message.User = object.User ?? "";
    message.Attributes = Object.entries(object.Attributes ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.OutboundGroupTags = object.OutboundGroupTags?.map((e) => e) || [];
    message.OutboundTag = object.OutboundTag ?? "";
    return message;
  },
};

messageTypeRegistry.set(RoutingContext.$type, RoutingContext);

function createBaseRoutingContext_AttributesEntry(): RoutingContext_AttributesEntry {
  return { $type: "xray.app.router.command.RoutingContext.AttributesEntry", key: "", value: "" };
}

export const RoutingContext_AttributesEntry: MessageFns<
  RoutingContext_AttributesEntry,
  "xray.app.router.command.RoutingContext.AttributesEntry"
> = {
  $type: "xray.app.router.command.RoutingContext.AttributesEntry" as const,

  encode(message: RoutingContext_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoutingContext_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoutingContext_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoutingContext_AttributesEntry {
    return {
      $type: RoutingContext_AttributesEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: RoutingContext_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<RoutingContext_AttributesEntry>): RoutingContext_AttributesEntry {
    return RoutingContext_AttributesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RoutingContext_AttributesEntry>): RoutingContext_AttributesEntry {
    const message = createBaseRoutingContext_AttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(RoutingContext_AttributesEntry.$type, RoutingContext_AttributesEntry);

function createBaseSubscribeRoutingStatsRequest(): SubscribeRoutingStatsRequest {
  return { $type: "xray.app.router.command.SubscribeRoutingStatsRequest", FieldSelectors: [] };
}

export const SubscribeRoutingStatsRequest: MessageFns<
  SubscribeRoutingStatsRequest,
  "xray.app.router.command.SubscribeRoutingStatsRequest"
> = {
  $type: "xray.app.router.command.SubscribeRoutingStatsRequest" as const,

  encode(message: SubscribeRoutingStatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.FieldSelectors) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeRoutingStatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeRoutingStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.FieldSelectors.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeRoutingStatsRequest {
    return {
      $type: SubscribeRoutingStatsRequest.$type,
      FieldSelectors: globalThis.Array.isArray(object?.FieldSelectors)
        ? object.FieldSelectors.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SubscribeRoutingStatsRequest): unknown {
    const obj: any = {};
    if (message.FieldSelectors?.length) {
      obj.FieldSelectors = message.FieldSelectors;
    }
    return obj;
  },

  create(base?: DeepPartial<SubscribeRoutingStatsRequest>): SubscribeRoutingStatsRequest {
    return SubscribeRoutingStatsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubscribeRoutingStatsRequest>): SubscribeRoutingStatsRequest {
    const message = createBaseSubscribeRoutingStatsRequest();
    message.FieldSelectors = object.FieldSelectors?.map((e) => e) || [];
    return message;
  },
};

messageTypeRegistry.set(SubscribeRoutingStatsRequest.$type, SubscribeRoutingStatsRequest);

function createBaseTestRouteRequest(): TestRouteRequest {
  return {
    $type: "xray.app.router.command.TestRouteRequest",
    RoutingContext: undefined,
    FieldSelectors: [],
    PublishResult: false,
  };
}

export const TestRouteRequest: MessageFns<TestRouteRequest, "xray.app.router.command.TestRouteRequest"> = {
  $type: "xray.app.router.command.TestRouteRequest" as const,

  encode(message: TestRouteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.RoutingContext !== undefined) {
      RoutingContext.encode(message.RoutingContext, writer.uint32(10).fork()).join();
    }
    for (const v of message.FieldSelectors) {
      writer.uint32(18).string(v!);
    }
    if (message.PublishResult !== false) {
      writer.uint32(24).bool(message.PublishResult);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestRouteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestRouteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.RoutingContext = RoutingContext.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.FieldSelectors.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.PublishResult = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestRouteRequest {
    return {
      $type: TestRouteRequest.$type,
      RoutingContext: isSet(object.RoutingContext) ? RoutingContext.fromJSON(object.RoutingContext) : undefined,
      FieldSelectors: globalThis.Array.isArray(object?.FieldSelectors)
        ? object.FieldSelectors.map((e: any) => globalThis.String(e))
        : [],
      PublishResult: isSet(object.PublishResult) ? globalThis.Boolean(object.PublishResult) : false,
    };
  },

  toJSON(message: TestRouteRequest): unknown {
    const obj: any = {};
    if (message.RoutingContext !== undefined) {
      obj.RoutingContext = RoutingContext.toJSON(message.RoutingContext);
    }
    if (message.FieldSelectors?.length) {
      obj.FieldSelectors = message.FieldSelectors;
    }
    if (message.PublishResult !== false) {
      obj.PublishResult = message.PublishResult;
    }
    return obj;
  },

  create(base?: DeepPartial<TestRouteRequest>): TestRouteRequest {
    return TestRouteRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestRouteRequest>): TestRouteRequest {
    const message = createBaseTestRouteRequest();
    message.RoutingContext = (object.RoutingContext !== undefined && object.RoutingContext !== null)
      ? RoutingContext.fromPartial(object.RoutingContext)
      : undefined;
    message.FieldSelectors = object.FieldSelectors?.map((e) => e) || [];
    message.PublishResult = object.PublishResult ?? false;
    return message;
  },
};

messageTypeRegistry.set(TestRouteRequest.$type, TestRouteRequest);

function createBaseConfig(): Config {
  return { $type: "xray.app.router.command.Config" };
}

export const Config: MessageFns<Config, "xray.app.router.command.Config"> = {
  $type: "xray.app.router.command.Config" as const,

  encode(_: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Config {
    return { $type: Config.$type };
  },

  toJSON(_: Config): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Config>): Config {
    return Config.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Config>): Config {
    const message = createBaseConfig();
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

export type RoutingServiceDefinition = typeof RoutingServiceDefinition;
export const RoutingServiceDefinition = {
  name: "RoutingService",
  fullName: "xray.app.router.command.RoutingService",
  methods: {
    subscribeRoutingStats: {
      name: "SubscribeRoutingStats",
      requestType: SubscribeRoutingStatsRequest,
      requestStream: false,
      responseType: RoutingContext,
      responseStream: true,
      options: {},
    },
    testRoute: {
      name: "TestRoute",
      requestType: TestRouteRequest,
      requestStream: false,
      responseType: RoutingContext,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface RoutingServiceImplementation<CallContextExt = {}> {
  subscribeRoutingStats(
    request: SubscribeRoutingStatsRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<RoutingContext>>;
  testRoute(request: TestRouteRequest, context: CallContext & CallContextExt): Promise<DeepPartial<RoutingContext>>;
}

export interface RoutingServiceClient<CallOptionsExt = {}> {
  subscribeRoutingStats(
    request: DeepPartial<SubscribeRoutingStatsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<RoutingContext>;
  testRoute(request: DeepPartial<TestRouteRequest>, options?: CallOptions & CallOptionsExt): Promise<RoutingContext>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
