// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.29.3
// source: proxy/shadowsocks/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Network, networkFromJSON, networkToJSON } from "../../common/net/network";
import { ServerEndpoint } from "../../common/protocol/server_spec";
import { User } from "../../common/protocol/user";
import { messageTypeRegistry } from "../../typeRegistry";

export const protobufPackage = "xray.proxy.shadowsocks";

export enum CipherType {
  UNKNOWN = 0,
  AES_128_GCM = 5,
  AES_256_GCM = 6,
  CHACHA20_POLY1305 = 7,
  XCHACHA20_POLY1305 = 8,
  NONE = 9,
  UNRECOGNIZED = -1,
}

export function cipherTypeFromJSON(object: any): CipherType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return CipherType.UNKNOWN;
    case 5:
    case "AES_128_GCM":
      return CipherType.AES_128_GCM;
    case 6:
    case "AES_256_GCM":
      return CipherType.AES_256_GCM;
    case 7:
    case "CHACHA20_POLY1305":
      return CipherType.CHACHA20_POLY1305;
    case 8:
    case "XCHACHA20_POLY1305":
      return CipherType.XCHACHA20_POLY1305;
    case 9:
    case "NONE":
      return CipherType.NONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CipherType.UNRECOGNIZED;
  }
}

export function cipherTypeToJSON(object: CipherType): string {
  switch (object) {
    case CipherType.UNKNOWN:
      return "UNKNOWN";
    case CipherType.AES_128_GCM:
      return "AES_128_GCM";
    case CipherType.AES_256_GCM:
      return "AES_256_GCM";
    case CipherType.CHACHA20_POLY1305:
      return "CHACHA20_POLY1305";
    case CipherType.XCHACHA20_POLY1305:
      return "XCHACHA20_POLY1305";
    case CipherType.NONE:
      return "NONE";
    case CipherType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Account {
  $type: "xray.proxy.shadowsocks.Account";
  password: string;
  cipherType: CipherType;
  ivCheck: boolean;
}

export interface ServerConfig {
  $type: "xray.proxy.shadowsocks.ServerConfig";
  users: User[];
  network: Network[];
}

export interface ClientConfig {
  $type: "xray.proxy.shadowsocks.ClientConfig";
  server: ServerEndpoint | undefined;
}

function createBaseAccount(): Account {
  return { $type: "xray.proxy.shadowsocks.Account", password: "", cipherType: 0, ivCheck: false };
}

export const Account: MessageFns<Account, "xray.proxy.shadowsocks.Account"> = {
  $type: "xray.proxy.shadowsocks.Account" as const,

  encode(message: Account, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.password !== "") {
      writer.uint32(10).string(message.password);
    }
    if (message.cipherType !== 0) {
      writer.uint32(16).int32(message.cipherType);
    }
    if (message.ivCheck !== false) {
      writer.uint32(24).bool(message.ivCheck);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Account {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.cipherType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ivCheck = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Account {
    return {
      $type: Account.$type,
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      cipherType: isSet(object.cipherType) ? cipherTypeFromJSON(object.cipherType) : 0,
      ivCheck: isSet(object.ivCheck) ? globalThis.Boolean(object.ivCheck) : false,
    };
  },

  toJSON(message: Account): unknown {
    const obj: any = {};
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.cipherType !== 0) {
      obj.cipherType = cipherTypeToJSON(message.cipherType);
    }
    if (message.ivCheck !== false) {
      obj.ivCheck = message.ivCheck;
    }
    return obj;
  },

  create(base?: DeepPartial<Account>): Account {
    return Account.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Account>): Account {
    const message = createBaseAccount();
    message.password = object.password ?? "";
    message.cipherType = object.cipherType ?? 0;
    message.ivCheck = object.ivCheck ?? false;
    return message;
  },
};

messageTypeRegistry.set(Account.$type, Account);

function createBaseServerConfig(): ServerConfig {
  return { $type: "xray.proxy.shadowsocks.ServerConfig", users: [], network: [] };
}

export const ServerConfig: MessageFns<ServerConfig, "xray.proxy.shadowsocks.ServerConfig"> = {
  $type: "xray.proxy.shadowsocks.ServerConfig" as const,

  encode(message: ServerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      User.encode(v!, writer.uint32(10).fork()).join();
    }
    writer.uint32(18).fork();
    for (const v of message.network) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(User.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.network.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.network.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerConfig {
    return {
      $type: ServerConfig.$type,
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => User.fromJSON(e)) : [],
      network: globalThis.Array.isArray(object?.network) ? object.network.map((e: any) => networkFromJSON(e)) : [],
    };
  },

  toJSON(message: ServerConfig): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => User.toJSON(e));
    }
    if (message.network?.length) {
      obj.network = message.network.map((e) => networkToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ServerConfig>): ServerConfig {
    return ServerConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServerConfig>): ServerConfig {
    const message = createBaseServerConfig();
    message.users = object.users?.map((e) => User.fromPartial(e)) || [];
    message.network = object.network?.map((e) => e) || [];
    return message;
  },
};

messageTypeRegistry.set(ServerConfig.$type, ServerConfig);

function createBaseClientConfig(): ClientConfig {
  return { $type: "xray.proxy.shadowsocks.ClientConfig", server: undefined };
}

export const ClientConfig: MessageFns<ClientConfig, "xray.proxy.shadowsocks.ClientConfig"> = {
  $type: "xray.proxy.shadowsocks.ClientConfig" as const,

  encode(message: ClientConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.server !== undefined) {
      ServerEndpoint.encode(message.server, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.server = ServerEndpoint.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConfig {
    return {
      $type: ClientConfig.$type,
      server: isSet(object.server) ? ServerEndpoint.fromJSON(object.server) : undefined,
    };
  },

  toJSON(message: ClientConfig): unknown {
    const obj: any = {};
    if (message.server !== undefined) {
      obj.server = ServerEndpoint.toJSON(message.server);
    }
    return obj;
  },

  create(base?: DeepPartial<ClientConfig>): ClientConfig {
    return ClientConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClientConfig>): ClientConfig {
    const message = createBaseClientConfig();
    message.server = (object.server !== undefined && object.server !== null)
      ? ServerEndpoint.fromPartial(object.server)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(ClientConfig.$type, ClientConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
