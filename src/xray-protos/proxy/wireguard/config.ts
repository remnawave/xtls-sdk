// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: proxy/wireguard/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../typeRegistry";

export const protobufPackage = "xray.proxy.wireguard";

export interface PeerConfig {
  $type: "xray.proxy.wireguard.PeerConfig";
  publicKey: string;
  preSharedKey: string;
  endpoint: string;
  keepAlive: number;
  allowedIps: string[];
}

export interface DeviceConfig {
  $type: "xray.proxy.wireguard.DeviceConfig";
  secretKey: string;
  endpoint: string[];
  peers: PeerConfig[];
  mtu: number;
  numWorkers: number;
  reserved: Uint8Array;
  domainStrategy: DeviceConfig_DomainStrategy;
  isClient: boolean;
  kernelMode: boolean;
}

export enum DeviceConfig_DomainStrategy {
  FORCE_IP = 0,
  FORCE_IP4 = 1,
  FORCE_IP6 = 2,
  FORCE_IP46 = 3,
  FORCE_IP64 = 4,
  UNRECOGNIZED = -1,
}

export function deviceConfig_DomainStrategyFromJSON(object: any): DeviceConfig_DomainStrategy {
  switch (object) {
    case 0:
    case "FORCE_IP":
      return DeviceConfig_DomainStrategy.FORCE_IP;
    case 1:
    case "FORCE_IP4":
      return DeviceConfig_DomainStrategy.FORCE_IP4;
    case 2:
    case "FORCE_IP6":
      return DeviceConfig_DomainStrategy.FORCE_IP6;
    case 3:
    case "FORCE_IP46":
      return DeviceConfig_DomainStrategy.FORCE_IP46;
    case 4:
    case "FORCE_IP64":
      return DeviceConfig_DomainStrategy.FORCE_IP64;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DeviceConfig_DomainStrategy.UNRECOGNIZED;
  }
}

export function deviceConfig_DomainStrategyToJSON(object: DeviceConfig_DomainStrategy): string {
  switch (object) {
    case DeviceConfig_DomainStrategy.FORCE_IP:
      return "FORCE_IP";
    case DeviceConfig_DomainStrategy.FORCE_IP4:
      return "FORCE_IP4";
    case DeviceConfig_DomainStrategy.FORCE_IP6:
      return "FORCE_IP6";
    case DeviceConfig_DomainStrategy.FORCE_IP46:
      return "FORCE_IP46";
    case DeviceConfig_DomainStrategy.FORCE_IP64:
      return "FORCE_IP64";
    case DeviceConfig_DomainStrategy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBasePeerConfig(): PeerConfig {
  return {
    $type: "xray.proxy.wireguard.PeerConfig",
    publicKey: "",
    preSharedKey: "",
    endpoint: "",
    keepAlive: 0,
    allowedIps: [],
  };
}

export const PeerConfig: MessageFns<PeerConfig, "xray.proxy.wireguard.PeerConfig"> = {
  $type: "xray.proxy.wireguard.PeerConfig" as const,

  encode(message: PeerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKey !== "") {
      writer.uint32(10).string(message.publicKey);
    }
    if (message.preSharedKey !== "") {
      writer.uint32(18).string(message.preSharedKey);
    }
    if (message.endpoint !== "") {
      writer.uint32(26).string(message.endpoint);
    }
    if (message.keepAlive !== 0) {
      writer.uint32(32).uint32(message.keepAlive);
    }
    for (const v of message.allowedIps) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PeerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePeerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.preSharedKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.keepAlive = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.allowedIps.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PeerConfig {
    return {
      $type: PeerConfig.$type,
      publicKey: isSet(object.publicKey) ? globalThis.String(object.publicKey) : "",
      preSharedKey: isSet(object.preSharedKey) ? globalThis.String(object.preSharedKey) : "",
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      keepAlive: isSet(object.keepAlive) ? globalThis.Number(object.keepAlive) : 0,
      allowedIps: globalThis.Array.isArray(object?.allowedIps)
        ? object.allowedIps.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: PeerConfig): unknown {
    const obj: any = {};
    if (message.publicKey !== "") {
      obj.publicKey = message.publicKey;
    }
    if (message.preSharedKey !== "") {
      obj.preSharedKey = message.preSharedKey;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.keepAlive !== 0) {
      obj.keepAlive = Math.round(message.keepAlive);
    }
    if (message.allowedIps?.length) {
      obj.allowedIps = message.allowedIps;
    }
    return obj;
  },

  create(base?: DeepPartial<PeerConfig>): PeerConfig {
    return PeerConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PeerConfig>): PeerConfig {
    const message = createBasePeerConfig();
    message.publicKey = object.publicKey ?? "";
    message.preSharedKey = object.preSharedKey ?? "";
    message.endpoint = object.endpoint ?? "";
    message.keepAlive = object.keepAlive ?? 0;
    message.allowedIps = object.allowedIps?.map((e) => e) || [];
    return message;
  },
};

messageTypeRegistry.set(PeerConfig.$type, PeerConfig);

function createBaseDeviceConfig(): DeviceConfig {
  return {
    $type: "xray.proxy.wireguard.DeviceConfig",
    secretKey: "",
    endpoint: [],
    peers: [],
    mtu: 0,
    numWorkers: 0,
    reserved: new Uint8Array(0),
    domainStrategy: 0,
    isClient: false,
    kernelMode: false,
  };
}

export const DeviceConfig: MessageFns<DeviceConfig, "xray.proxy.wireguard.DeviceConfig"> = {
  $type: "xray.proxy.wireguard.DeviceConfig" as const,

  encode(message: DeviceConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.secretKey !== "") {
      writer.uint32(10).string(message.secretKey);
    }
    for (const v of message.endpoint) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.peers) {
      PeerConfig.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.mtu !== 0) {
      writer.uint32(32).int32(message.mtu);
    }
    if (message.numWorkers !== 0) {
      writer.uint32(40).int32(message.numWorkers);
    }
    if (message.reserved.length !== 0) {
      writer.uint32(50).bytes(message.reserved);
    }
    if (message.domainStrategy !== 0) {
      writer.uint32(56).int32(message.domainStrategy);
    }
    if (message.isClient !== false) {
      writer.uint32(64).bool(message.isClient);
    }
    if (message.kernelMode !== false) {
      writer.uint32(72).bool(message.kernelMode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeviceConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.secretKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endpoint.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.peers.push(PeerConfig.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.mtu = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.numWorkers = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.reserved = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.domainStrategy = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isClient = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.kernelMode = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceConfig {
    return {
      $type: DeviceConfig.$type,
      secretKey: isSet(object.secretKey) ? globalThis.String(object.secretKey) : "",
      endpoint: globalThis.Array.isArray(object?.endpoint) ? object.endpoint.map((e: any) => globalThis.String(e)) : [],
      peers: globalThis.Array.isArray(object?.peers) ? object.peers.map((e: any) => PeerConfig.fromJSON(e)) : [],
      mtu: isSet(object.mtu) ? globalThis.Number(object.mtu) : 0,
      numWorkers: isSet(object.numWorkers) ? globalThis.Number(object.numWorkers) : 0,
      reserved: isSet(object.reserved) ? bytesFromBase64(object.reserved) : new Uint8Array(0),
      domainStrategy: isSet(object.domainStrategy) ? deviceConfig_DomainStrategyFromJSON(object.domainStrategy) : 0,
      isClient: isSet(object.isClient) ? globalThis.Boolean(object.isClient) : false,
      kernelMode: isSet(object.kernelMode) ? globalThis.Boolean(object.kernelMode) : false,
    };
  },

  toJSON(message: DeviceConfig): unknown {
    const obj: any = {};
    if (message.secretKey !== "") {
      obj.secretKey = message.secretKey;
    }
    if (message.endpoint?.length) {
      obj.endpoint = message.endpoint;
    }
    if (message.peers?.length) {
      obj.peers = message.peers.map((e) => PeerConfig.toJSON(e));
    }
    if (message.mtu !== 0) {
      obj.mtu = Math.round(message.mtu);
    }
    if (message.numWorkers !== 0) {
      obj.numWorkers = Math.round(message.numWorkers);
    }
    if (message.reserved.length !== 0) {
      obj.reserved = base64FromBytes(message.reserved);
    }
    if (message.domainStrategy !== 0) {
      obj.domainStrategy = deviceConfig_DomainStrategyToJSON(message.domainStrategy);
    }
    if (message.isClient !== false) {
      obj.isClient = message.isClient;
    }
    if (message.kernelMode !== false) {
      obj.kernelMode = message.kernelMode;
    }
    return obj;
  },

  create(base?: DeepPartial<DeviceConfig>): DeviceConfig {
    return DeviceConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeviceConfig>): DeviceConfig {
    const message = createBaseDeviceConfig();
    message.secretKey = object.secretKey ?? "";
    message.endpoint = object.endpoint?.map((e) => e) || [];
    message.peers = object.peers?.map((e) => PeerConfig.fromPartial(e)) || [];
    message.mtu = object.mtu ?? 0;
    message.numWorkers = object.numWorkers ?? 0;
    message.reserved = object.reserved ?? new Uint8Array(0);
    message.domainStrategy = object.domainStrategy ?? 0;
    message.isClient = object.isClient ?? false;
    message.kernelMode = object.kernelMode ?? false;
    return message;
  },
};

messageTypeRegistry.set(DeviceConfig.$type, DeviceConfig);

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
