// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: proxy/dokodemo/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { IPOrDomain } from "../../common/net/address";
import { Network, networkFromJSON, NetworkList, networkToJSON } from "../../common/net/network";
import { messageTypeRegistry } from "../../typeRegistry";

export const protobufPackage = "xray.proxy.dokodemo";

export interface Config {
  $type: "xray.proxy.dokodemo.Config";
  address: IPOrDomain | undefined;
  port: number;
  /**
   * List of networks that the Dokodemo accepts.
   * Deprecated. Use networks.
   *
   * @deprecated
   */
  networkList:
    | NetworkList
    | undefined;
  /** List of networks that the Dokodemo accepts. */
  networks: Network[];
  /** @deprecated */
  timeout: number;
  followRedirect: boolean;
  userLevel: number;
}

function createBaseConfig(): Config {
  return {
    $type: "xray.proxy.dokodemo.Config",
    address: undefined,
    port: 0,
    networkList: undefined,
    networks: [],
    timeout: 0,
    followRedirect: false,
    userLevel: 0,
  };
}

export const Config: MessageFns<Config, "xray.proxy.dokodemo.Config"> = {
  $type: "xray.proxy.dokodemo.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== undefined) {
      IPOrDomain.encode(message.address, writer.uint32(10).fork()).join();
    }
    if (message.port !== 0) {
      writer.uint32(16).uint32(message.port);
    }
    if (message.networkList !== undefined) {
      NetworkList.encode(message.networkList, writer.uint32(26).fork()).join();
    }
    writer.uint32(58).fork();
    for (const v of message.networks) {
      writer.int32(v);
    }
    writer.join();
    if (message.timeout !== 0) {
      writer.uint32(32).uint32(message.timeout);
    }
    if (message.followRedirect !== false) {
      writer.uint32(40).bool(message.followRedirect);
    }
    if (message.userLevel !== 0) {
      writer.uint32(48).uint32(message.userLevel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = IPOrDomain.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.port = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.networkList = NetworkList.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.networks.push(reader.int32() as any);

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.networks.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.timeout = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.followRedirect = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.userLevel = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      address: isSet(object.address) ? IPOrDomain.fromJSON(object.address) : undefined,
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
      networkList: isSet(object.networkList) ? NetworkList.fromJSON(object.networkList) : undefined,
      networks: globalThis.Array.isArray(object?.networks) ? object.networks.map((e: any) => networkFromJSON(e)) : [],
      timeout: isSet(object.timeout) ? globalThis.Number(object.timeout) : 0,
      followRedirect: isSet(object.followRedirect) ? globalThis.Boolean(object.followRedirect) : false,
      userLevel: isSet(object.userLevel) ? globalThis.Number(object.userLevel) : 0,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = IPOrDomain.toJSON(message.address);
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port);
    }
    if (message.networkList !== undefined) {
      obj.networkList = NetworkList.toJSON(message.networkList);
    }
    if (message.networks?.length) {
      obj.networks = message.networks.map((e) => networkToJSON(e));
    }
    if (message.timeout !== 0) {
      obj.timeout = Math.round(message.timeout);
    }
    if (message.followRedirect !== false) {
      obj.followRedirect = message.followRedirect;
    }
    if (message.userLevel !== 0) {
      obj.userLevel = Math.round(message.userLevel);
    }
    return obj;
  },

  create(base?: DeepPartial<Config>): Config {
    return Config.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Config>): Config {
    const message = createBaseConfig();
    message.address = (object.address !== undefined && object.address !== null)
      ? IPOrDomain.fromPartial(object.address)
      : undefined;
    message.port = object.port ?? 0;
    message.networkList = (object.networkList !== undefined && object.networkList !== null)
      ? NetworkList.fromPartial(object.networkList)
      : undefined;
    message.networks = object.networks?.map((e) => e) || [];
    message.timeout = object.timeout ?? 0;
    message.followRedirect = object.followRedirect ?? false;
    message.userLevel = object.userLevel ?? 0;
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
