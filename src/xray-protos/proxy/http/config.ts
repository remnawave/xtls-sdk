// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.29.3
// source: proxy/http/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ServerEndpoint } from "../../common/protocol/server_spec";
import { messageTypeRegistry } from "../../typeRegistry";

export const protobufPackage = "xray.proxy.http";

export interface Account {
  $type: "xray.proxy.http.Account";
  username: string;
  password: string;
}

/** Config for HTTP proxy server. */
export interface ServerConfig {
  $type: "xray.proxy.http.ServerConfig";
  accounts: { [key: string]: string };
  allowTransparent: boolean;
  userLevel: number;
}

export interface ServerConfig_AccountsEntry {
  $type: "xray.proxy.http.ServerConfig.AccountsEntry";
  key: string;
  value: string;
}

export interface Header {
  $type: "xray.proxy.http.Header";
  key: string;
  value: string;
}

/** ClientConfig is the protobuf config for HTTP proxy client. */
export interface ClientConfig {
  $type: "xray.proxy.http.ClientConfig";
  /** Sever is a list of HTTP server addresses. */
  server: ServerEndpoint | undefined;
  header: Header[];
}

function createBaseAccount(): Account {
  return { $type: "xray.proxy.http.Account", username: "", password: "" };
}

export const Account: MessageFns<Account, "xray.proxy.http.Account"> = {
  $type: "xray.proxy.http.Account" as const,

  encode(message: Account, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Account {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Account {
    return {
      $type: Account.$type,
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: Account): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create(base?: DeepPartial<Account>): Account {
    return Account.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Account>): Account {
    const message = createBaseAccount();
    message.username = object.username ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

messageTypeRegistry.set(Account.$type, Account);

function createBaseServerConfig(): ServerConfig {
  return { $type: "xray.proxy.http.ServerConfig", accounts: {}, allowTransparent: false, userLevel: 0 };
}

export const ServerConfig: MessageFns<ServerConfig, "xray.proxy.http.ServerConfig"> = {
  $type: "xray.proxy.http.ServerConfig" as const,

  encode(message: ServerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.accounts).forEach(([key, value]) => {
      ServerConfig_AccountsEntry.encode(
        { $type: "xray.proxy.http.ServerConfig.AccountsEntry", key: key as any, value },
        writer.uint32(18).fork(),
      ).join();
    });
    if (message.allowTransparent !== false) {
      writer.uint32(24).bool(message.allowTransparent);
    }
    if (message.userLevel !== 0) {
      writer.uint32(32).uint32(message.userLevel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = ServerConfig_AccountsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.accounts[entry2.key] = entry2.value;
          }
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.allowTransparent = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.userLevel = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerConfig {
    return {
      $type: ServerConfig.$type,
      accounts: isObject(object.accounts)
        ? Object.entries(object.accounts).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      allowTransparent: isSet(object.allowTransparent) ? globalThis.Boolean(object.allowTransparent) : false,
      userLevel: isSet(object.userLevel) ? globalThis.Number(object.userLevel) : 0,
    };
  },

  toJSON(message: ServerConfig): unknown {
    const obj: any = {};
    if (message.accounts) {
      const entries = Object.entries(message.accounts);
      if (entries.length > 0) {
        obj.accounts = {};
        entries.forEach(([k, v]) => {
          obj.accounts[k] = v;
        });
      }
    }
    if (message.allowTransparent !== false) {
      obj.allowTransparent = message.allowTransparent;
    }
    if (message.userLevel !== 0) {
      obj.userLevel = Math.round(message.userLevel);
    }
    return obj;
  },

  create(base?: DeepPartial<ServerConfig>): ServerConfig {
    return ServerConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServerConfig>): ServerConfig {
    const message = createBaseServerConfig();
    message.accounts = Object.entries(object.accounts ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.allowTransparent = object.allowTransparent ?? false;
    message.userLevel = object.userLevel ?? 0;
    return message;
  },
};

messageTypeRegistry.set(ServerConfig.$type, ServerConfig);

function createBaseServerConfig_AccountsEntry(): ServerConfig_AccountsEntry {
  return { $type: "xray.proxy.http.ServerConfig.AccountsEntry", key: "", value: "" };
}

export const ServerConfig_AccountsEntry: MessageFns<
  ServerConfig_AccountsEntry,
  "xray.proxy.http.ServerConfig.AccountsEntry"
> = {
  $type: "xray.proxy.http.ServerConfig.AccountsEntry" as const,

  encode(message: ServerConfig_AccountsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerConfig_AccountsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerConfig_AccountsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerConfig_AccountsEntry {
    return {
      $type: ServerConfig_AccountsEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ServerConfig_AccountsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ServerConfig_AccountsEntry>): ServerConfig_AccountsEntry {
    return ServerConfig_AccountsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServerConfig_AccountsEntry>): ServerConfig_AccountsEntry {
    const message = createBaseServerConfig_AccountsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(ServerConfig_AccountsEntry.$type, ServerConfig_AccountsEntry);

function createBaseHeader(): Header {
  return { $type: "xray.proxy.http.Header", key: "", value: "" };
}

export const Header: MessageFns<Header, "xray.proxy.http.Header"> = {
  $type: "xray.proxy.http.Header" as const,

  encode(message: Header, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Header {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Header {
    return {
      $type: Header.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Header): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Header>): Header {
    return Header.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Header>): Header {
    const message = createBaseHeader();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(Header.$type, Header);

function createBaseClientConfig(): ClientConfig {
  return { $type: "xray.proxy.http.ClientConfig", server: undefined, header: [] };
}

export const ClientConfig: MessageFns<ClientConfig, "xray.proxy.http.ClientConfig"> = {
  $type: "xray.proxy.http.ClientConfig" as const,

  encode(message: ClientConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.server !== undefined) {
      ServerEndpoint.encode(message.server, writer.uint32(10).fork()).join();
    }
    for (const v of message.header) {
      Header.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.server = ServerEndpoint.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.header.push(Header.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConfig {
    return {
      $type: ClientConfig.$type,
      server: isSet(object.server) ? ServerEndpoint.fromJSON(object.server) : undefined,
      header: globalThis.Array.isArray(object?.header) ? object.header.map((e: any) => Header.fromJSON(e)) : [],
    };
  },

  toJSON(message: ClientConfig): unknown {
    const obj: any = {};
    if (message.server !== undefined) {
      obj.server = ServerEndpoint.toJSON(message.server);
    }
    if (message.header?.length) {
      obj.header = message.header.map((e) => Header.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ClientConfig>): ClientConfig {
    return ClientConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClientConfig>): ClientConfig {
    const message = createBaseClientConfig();
    message.server = (object.server !== undefined && object.server !== null)
      ? ServerEndpoint.fromPartial(object.server)
      : undefined;
    message.header = object.header?.map((e) => Header.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(ClientConfig.$type, ClientConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
