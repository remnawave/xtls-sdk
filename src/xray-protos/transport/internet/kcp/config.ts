// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: transport/internet/kcp/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { TypedMessage } from "../../../common/serial/typed_message";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "xray.transport.internet.kcp";

/** Maximum Transmission Unit, in bytes. */
export interface MTU {
  $type: "xray.transport.internet.kcp.MTU";
  value: number;
}

/** Transmission Time Interview, in milli-sec. */
export interface TTI {
  $type: "xray.transport.internet.kcp.TTI";
  value: number;
}

/** Uplink capacity, in MB. */
export interface UplinkCapacity {
  $type: "xray.transport.internet.kcp.UplinkCapacity";
  value: number;
}

/** Downlink capacity, in MB. */
export interface DownlinkCapacity {
  $type: "xray.transport.internet.kcp.DownlinkCapacity";
  value: number;
}

export interface WriteBuffer {
  $type: "xray.transport.internet.kcp.WriteBuffer";
  /** Buffer size in bytes. */
  size: number;
}

export interface ReadBuffer {
  $type: "xray.transport.internet.kcp.ReadBuffer";
  /** Buffer size in bytes. */
  size: number;
}

export interface ConnectionReuse {
  $type: "xray.transport.internet.kcp.ConnectionReuse";
  enable: boolean;
}

/** Maximum Transmission Unit, in bytes. */
export interface EncryptionSeed {
  $type: "xray.transport.internet.kcp.EncryptionSeed";
  seed: string;
}

export interface Config {
  $type: "xray.transport.internet.kcp.Config";
  mtu: MTU | undefined;
  tti: TTI | undefined;
  uplinkCapacity: UplinkCapacity | undefined;
  downlinkCapacity: DownlinkCapacity | undefined;
  congestion: boolean;
  writeBuffer: WriteBuffer | undefined;
  readBuffer: ReadBuffer | undefined;
  headerConfig: TypedMessage | undefined;
  seed: EncryptionSeed | undefined;
}

function createBaseMTU(): MTU {
  return { $type: "xray.transport.internet.kcp.MTU", value: 0 };
}

export const MTU: MessageFns<MTU, "xray.transport.internet.kcp.MTU"> = {
  $type: "xray.transport.internet.kcp.MTU" as const,

  encode(message: MTU, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).uint32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MTU {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMTU();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MTU {
    return { $type: MTU.$type, value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: MTU): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<MTU>): MTU {
    return MTU.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MTU>): MTU {
    const message = createBaseMTU();
    message.value = object.value ?? 0;
    return message;
  },
};

messageTypeRegistry.set(MTU.$type, MTU);

function createBaseTTI(): TTI {
  return { $type: "xray.transport.internet.kcp.TTI", value: 0 };
}

export const TTI: MessageFns<TTI, "xray.transport.internet.kcp.TTI"> = {
  $type: "xray.transport.internet.kcp.TTI" as const,

  encode(message: TTI, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).uint32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TTI {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTTI();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TTI {
    return { $type: TTI.$type, value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: TTI): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<TTI>): TTI {
    return TTI.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TTI>): TTI {
    const message = createBaseTTI();
    message.value = object.value ?? 0;
    return message;
  },
};

messageTypeRegistry.set(TTI.$type, TTI);

function createBaseUplinkCapacity(): UplinkCapacity {
  return { $type: "xray.transport.internet.kcp.UplinkCapacity", value: 0 };
}

export const UplinkCapacity: MessageFns<UplinkCapacity, "xray.transport.internet.kcp.UplinkCapacity"> = {
  $type: "xray.transport.internet.kcp.UplinkCapacity" as const,

  encode(message: UplinkCapacity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).uint32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UplinkCapacity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUplinkCapacity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UplinkCapacity {
    return { $type: UplinkCapacity.$type, value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: UplinkCapacity): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<UplinkCapacity>): UplinkCapacity {
    return UplinkCapacity.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UplinkCapacity>): UplinkCapacity {
    const message = createBaseUplinkCapacity();
    message.value = object.value ?? 0;
    return message;
  },
};

messageTypeRegistry.set(UplinkCapacity.$type, UplinkCapacity);

function createBaseDownlinkCapacity(): DownlinkCapacity {
  return { $type: "xray.transport.internet.kcp.DownlinkCapacity", value: 0 };
}

export const DownlinkCapacity: MessageFns<DownlinkCapacity, "xray.transport.internet.kcp.DownlinkCapacity"> = {
  $type: "xray.transport.internet.kcp.DownlinkCapacity" as const,

  encode(message: DownlinkCapacity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(8).uint32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DownlinkCapacity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDownlinkCapacity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DownlinkCapacity {
    return { $type: DownlinkCapacity.$type, value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: DownlinkCapacity): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<DownlinkCapacity>): DownlinkCapacity {
    return DownlinkCapacity.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DownlinkCapacity>): DownlinkCapacity {
    const message = createBaseDownlinkCapacity();
    message.value = object.value ?? 0;
    return message;
  },
};

messageTypeRegistry.set(DownlinkCapacity.$type, DownlinkCapacity);

function createBaseWriteBuffer(): WriteBuffer {
  return { $type: "xray.transport.internet.kcp.WriteBuffer", size: 0 };
}

export const WriteBuffer: MessageFns<WriteBuffer, "xray.transport.internet.kcp.WriteBuffer"> = {
  $type: "xray.transport.internet.kcp.WriteBuffer" as const,

  encode(message: WriteBuffer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.size !== 0) {
      writer.uint32(8).uint32(message.size);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WriteBuffer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWriteBuffer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.size = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WriteBuffer {
    return { $type: WriteBuffer.$type, size: isSet(object.size) ? globalThis.Number(object.size) : 0 };
  },

  toJSON(message: WriteBuffer): unknown {
    const obj: any = {};
    if (message.size !== 0) {
      obj.size = Math.round(message.size);
    }
    return obj;
  },

  create(base?: DeepPartial<WriteBuffer>): WriteBuffer {
    return WriteBuffer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WriteBuffer>): WriteBuffer {
    const message = createBaseWriteBuffer();
    message.size = object.size ?? 0;
    return message;
  },
};

messageTypeRegistry.set(WriteBuffer.$type, WriteBuffer);

function createBaseReadBuffer(): ReadBuffer {
  return { $type: "xray.transport.internet.kcp.ReadBuffer", size: 0 };
}

export const ReadBuffer: MessageFns<ReadBuffer, "xray.transport.internet.kcp.ReadBuffer"> = {
  $type: "xray.transport.internet.kcp.ReadBuffer" as const,

  encode(message: ReadBuffer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.size !== 0) {
      writer.uint32(8).uint32(message.size);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadBuffer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadBuffer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.size = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadBuffer {
    return { $type: ReadBuffer.$type, size: isSet(object.size) ? globalThis.Number(object.size) : 0 };
  },

  toJSON(message: ReadBuffer): unknown {
    const obj: any = {};
    if (message.size !== 0) {
      obj.size = Math.round(message.size);
    }
    return obj;
  },

  create(base?: DeepPartial<ReadBuffer>): ReadBuffer {
    return ReadBuffer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadBuffer>): ReadBuffer {
    const message = createBaseReadBuffer();
    message.size = object.size ?? 0;
    return message;
  },
};

messageTypeRegistry.set(ReadBuffer.$type, ReadBuffer);

function createBaseConnectionReuse(): ConnectionReuse {
  return { $type: "xray.transport.internet.kcp.ConnectionReuse", enable: false };
}

export const ConnectionReuse: MessageFns<ConnectionReuse, "xray.transport.internet.kcp.ConnectionReuse"> = {
  $type: "xray.transport.internet.kcp.ConnectionReuse" as const,

  encode(message: ConnectionReuse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enable !== false) {
      writer.uint32(8).bool(message.enable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConnectionReuse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnectionReuse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enable = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConnectionReuse {
    return { $type: ConnectionReuse.$type, enable: isSet(object.enable) ? globalThis.Boolean(object.enable) : false };
  },

  toJSON(message: ConnectionReuse): unknown {
    const obj: any = {};
    if (message.enable !== false) {
      obj.enable = message.enable;
    }
    return obj;
  },

  create(base?: DeepPartial<ConnectionReuse>): ConnectionReuse {
    return ConnectionReuse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ConnectionReuse>): ConnectionReuse {
    const message = createBaseConnectionReuse();
    message.enable = object.enable ?? false;
    return message;
  },
};

messageTypeRegistry.set(ConnectionReuse.$type, ConnectionReuse);

function createBaseEncryptionSeed(): EncryptionSeed {
  return { $type: "xray.transport.internet.kcp.EncryptionSeed", seed: "" };
}

export const EncryptionSeed: MessageFns<EncryptionSeed, "xray.transport.internet.kcp.EncryptionSeed"> = {
  $type: "xray.transport.internet.kcp.EncryptionSeed" as const,

  encode(message: EncryptionSeed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seed !== "") {
      writer.uint32(10).string(message.seed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncryptionSeed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncryptionSeed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.seed = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EncryptionSeed {
    return { $type: EncryptionSeed.$type, seed: isSet(object.seed) ? globalThis.String(object.seed) : "" };
  },

  toJSON(message: EncryptionSeed): unknown {
    const obj: any = {};
    if (message.seed !== "") {
      obj.seed = message.seed;
    }
    return obj;
  },

  create(base?: DeepPartial<EncryptionSeed>): EncryptionSeed {
    return EncryptionSeed.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EncryptionSeed>): EncryptionSeed {
    const message = createBaseEncryptionSeed();
    message.seed = object.seed ?? "";
    return message;
  },
};

messageTypeRegistry.set(EncryptionSeed.$type, EncryptionSeed);

function createBaseConfig(): Config {
  return {
    $type: "xray.transport.internet.kcp.Config",
    mtu: undefined,
    tti: undefined,
    uplinkCapacity: undefined,
    downlinkCapacity: undefined,
    congestion: false,
    writeBuffer: undefined,
    readBuffer: undefined,
    headerConfig: undefined,
    seed: undefined,
  };
}

export const Config: MessageFns<Config, "xray.transport.internet.kcp.Config"> = {
  $type: "xray.transport.internet.kcp.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mtu !== undefined) {
      MTU.encode(message.mtu, writer.uint32(10).fork()).join();
    }
    if (message.tti !== undefined) {
      TTI.encode(message.tti, writer.uint32(18).fork()).join();
    }
    if (message.uplinkCapacity !== undefined) {
      UplinkCapacity.encode(message.uplinkCapacity, writer.uint32(26).fork()).join();
    }
    if (message.downlinkCapacity !== undefined) {
      DownlinkCapacity.encode(message.downlinkCapacity, writer.uint32(34).fork()).join();
    }
    if (message.congestion !== false) {
      writer.uint32(40).bool(message.congestion);
    }
    if (message.writeBuffer !== undefined) {
      WriteBuffer.encode(message.writeBuffer, writer.uint32(50).fork()).join();
    }
    if (message.readBuffer !== undefined) {
      ReadBuffer.encode(message.readBuffer, writer.uint32(58).fork()).join();
    }
    if (message.headerConfig !== undefined) {
      TypedMessage.encode(message.headerConfig, writer.uint32(66).fork()).join();
    }
    if (message.seed !== undefined) {
      EncryptionSeed.encode(message.seed, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mtu = MTU.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tti = TTI.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.uplinkCapacity = UplinkCapacity.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.downlinkCapacity = DownlinkCapacity.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.congestion = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.writeBuffer = WriteBuffer.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.readBuffer = ReadBuffer.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.headerConfig = TypedMessage.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.seed = EncryptionSeed.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      mtu: isSet(object.mtu) ? MTU.fromJSON(object.mtu) : undefined,
      tti: isSet(object.tti) ? TTI.fromJSON(object.tti) : undefined,
      uplinkCapacity: isSet(object.uplinkCapacity) ? UplinkCapacity.fromJSON(object.uplinkCapacity) : undefined,
      downlinkCapacity: isSet(object.downlinkCapacity) ? DownlinkCapacity.fromJSON(object.downlinkCapacity) : undefined,
      congestion: isSet(object.congestion) ? globalThis.Boolean(object.congestion) : false,
      writeBuffer: isSet(object.writeBuffer) ? WriteBuffer.fromJSON(object.writeBuffer) : undefined,
      readBuffer: isSet(object.readBuffer) ? ReadBuffer.fromJSON(object.readBuffer) : undefined,
      headerConfig: isSet(object.headerConfig) ? TypedMessage.fromJSON(object.headerConfig) : undefined,
      seed: isSet(object.seed) ? EncryptionSeed.fromJSON(object.seed) : undefined,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.mtu !== undefined) {
      obj.mtu = MTU.toJSON(message.mtu);
    }
    if (message.tti !== undefined) {
      obj.tti = TTI.toJSON(message.tti);
    }
    if (message.uplinkCapacity !== undefined) {
      obj.uplinkCapacity = UplinkCapacity.toJSON(message.uplinkCapacity);
    }
    if (message.downlinkCapacity !== undefined) {
      obj.downlinkCapacity = DownlinkCapacity.toJSON(message.downlinkCapacity);
    }
    if (message.congestion !== false) {
      obj.congestion = message.congestion;
    }
    if (message.writeBuffer !== undefined) {
      obj.writeBuffer = WriteBuffer.toJSON(message.writeBuffer);
    }
    if (message.readBuffer !== undefined) {
      obj.readBuffer = ReadBuffer.toJSON(message.readBuffer);
    }
    if (message.headerConfig !== undefined) {
      obj.headerConfig = TypedMessage.toJSON(message.headerConfig);
    }
    if (message.seed !== undefined) {
      obj.seed = EncryptionSeed.toJSON(message.seed);
    }
    return obj;
  },

  create(base?: DeepPartial<Config>): Config {
    return Config.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Config>): Config {
    const message = createBaseConfig();
    message.mtu = (object.mtu !== undefined && object.mtu !== null) ? MTU.fromPartial(object.mtu) : undefined;
    message.tti = (object.tti !== undefined && object.tti !== null) ? TTI.fromPartial(object.tti) : undefined;
    message.uplinkCapacity = (object.uplinkCapacity !== undefined && object.uplinkCapacity !== null)
      ? UplinkCapacity.fromPartial(object.uplinkCapacity)
      : undefined;
    message.downlinkCapacity = (object.downlinkCapacity !== undefined && object.downlinkCapacity !== null)
      ? DownlinkCapacity.fromPartial(object.downlinkCapacity)
      : undefined;
    message.congestion = object.congestion ?? false;
    message.writeBuffer = (object.writeBuffer !== undefined && object.writeBuffer !== null)
      ? WriteBuffer.fromPartial(object.writeBuffer)
      : undefined;
    message.readBuffer = (object.readBuffer !== undefined && object.readBuffer !== null)
      ? ReadBuffer.fromPartial(object.readBuffer)
      : undefined;
    message.headerConfig = (object.headerConfig !== undefined && object.headerConfig !== null)
      ? TypedMessage.fromPartial(object.headerConfig)
      : undefined;
    message.seed = (object.seed !== undefined && object.seed !== null)
      ? EncryptionSeed.fromPartial(object.seed)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
