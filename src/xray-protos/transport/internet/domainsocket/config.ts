// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: transport/internet/domainsocket/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "xray.transport.internet.domainsocket";

export interface Config {
  $type: "xray.transport.internet.domainsocket.Config";
  /**
   * Path of the domain socket. This overrides the IP/Port parameter from
   * upstream caller.
   */
  path: string;
  /**
   * Abstract speicifies whether to use abstract namespace or not.
   * Traditionally Unix domain socket is file system based. Abstract domain
   * socket can be used without acquiring file lock.
   */
  abstract: boolean;
  /**
   * Some apps, eg. haproxy, use the full length of sockaddr_un.sun_path to
   * connect(2) or bind(2) when using abstract UDS.
   */
  padding: boolean;
}

function createBaseConfig(): Config {
  return { $type: "xray.transport.internet.domainsocket.Config", path: "", abstract: false, padding: false };
}

export const Config: MessageFns<Config, "xray.transport.internet.domainsocket.Config"> = {
  $type: "xray.transport.internet.domainsocket.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.abstract !== false) {
      writer.uint32(16).bool(message.abstract);
    }
    if (message.padding !== false) {
      writer.uint32(24).bool(message.padding);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.abstract = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.padding = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      abstract: isSet(object.abstract) ? globalThis.Boolean(object.abstract) : false,
      padding: isSet(object.padding) ? globalThis.Boolean(object.padding) : false,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.abstract !== false) {
      obj.abstract = message.abstract;
    }
    if (message.padding !== false) {
      obj.padding = message.padding;
    }
    return obj;
  },

  create(base?: DeepPartial<Config>): Config {
    return Config.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Config>): Config {
    const message = createBaseConfig();
    message.path = object.path ?? "";
    message.abstract = object.abstract ?? false;
    message.padding = object.padding ?? false;
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
